{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rp from 'request-promise'\nimport * as uid from 'uniqid'\nimport * as _ from 'lodash'\nimport * as camelcase from 'camelcase'\nimport { OpenStreelMapReverseGeoError } from './Error';\n\nfunction isLongitude(lng: string) {\n    const lngN = Number(lng)\n    return lngN >= -180 && lngN <= 180\n}\n\nfunction isLatitude(lat: string) {\n    const latN = Number(lat)\n    return latN >= -90 && latN <= 90\n  }\n\nexport interface IAddress {\n    memorial?: string,\n    village?: string,\n    county?: string,\n    townhall?: string,\n    pedestrian?: string,\n    houseNumber?: string,\n    neighbourhood?: string,\n    restaurant?: string,\n    road?: string,\n    suburb?: string,\n    city?: string,\n    cityDistrict?: string,\n    country?: string,\n    state?: string,\n    stateDistrict?: string,\n    postcode?: string,\n    countryCode?: string,\n    theatre?: string,\n    boundingbox?: string\n}\n\nexport interface IReverse {\n    placeId: string\n    lat: string\n    lng: string\n    displayName: string\n    address: IAddress\n    latInput: string\n    lngInput: string\n    fromCache: boolean\n}\n\nexport class ReverseGeocoder {\n    public static cache: IReverse[] = []\n    public static cacheIsEnabled: boolean = true\n    public static maxCacheSize: number = 100\n\n        // INPUT\n    public latInput: string\n    public lngInput: string\n\n    constructor(lat: string, lng: string) {\n        // Validate lat and lng\n        if (!isLatitude(lat)) {\n            throw new OpenStreelMapReverseGeoError('Latitude is not valid')\n        }\n        if (!isLongitude(lng)) {\n            throw new OpenStreelMapReverseGeoError('Longitude is not valid')\n        }\n        this.latInput = lat\n        this.lngInput = lng\n    }\n\n    public enableCache(cacheSize?: number) {\n        ReverseGeocoder.cacheIsEnabled = true\n        ReverseGeocoder.maxCacheSize = cacheSize ||Â 100\n    }\n\n    public disableCache() {\n        ReverseGeocoder.cacheIsEnabled = false\n        ReverseGeocoder.cache = []\n    }\n\n    public async getReverse(): Promise<IReverse> {\n        // API response\n        let response: any\n\n        // Search in cache\n        if (ReverseGeocoder.cacheIsEnabled) {\n            const index =  this.isInCache(this.latInput, this.lngInput)\n            if (index > -1) {\n                const resultInCache = ReverseGeocoder.cache[index]\n                resultInCache.fromCache = true\n                return ReverseGeocoder.cache[index]\n            }\n        }\n\n        // Not in cache make request\n        response = await this.getRequest()\n\n        if (response.error) {\n            throw new OpenStreelMapReverseGeoError(response.error)\n        }\n\n        const result: IReverse = {\n            placeId : response.place_id,\n            displayName : response.display_name,\n            lat : response.lat,\n            lng : response.lon,\n            address : {},\n            latInput : this.latInput,\n            lngInput : this.lngInput,\n            fromCache : false\n        }\n\n        if (response.address) {\n            for (const key in response.address) {\n                if (key.indexOf('_') > -1) {\n                    (result.address as any)[camelcase(key)] = response.address[key]\n                } else {\n                    (result.address as any)[key] = response.address[key]\n                }\n            }\n        }\n\n        if (ReverseGeocoder.cacheIsEnabled) {\n            ReverseGeocoder.cache.push(result)\n        }\n\n        return result\n    }\n\n    public isInCache(lat: string, lng: string): number {\n        return  _.findIndex(ReverseGeocoder.cache, (o) => {\n           return o.latInput === lat && o.lngInput === lng\n       })\n    }\n\n    public async getRequest(): Promise<any> {\n        const options = {\n            method: 'GET',\n            uri: 'https://nominatim.openstreetmap.org/reverse?format=json' +\n                '&lat=' + this.latInput +\n                '&lon=' + this.lngInput,\n            headers: {\n                'User-Agent': uid(),\n                'Referer': 'http://' + uid() + '/'\n            }\n        }\n        const response = JSON.parse(await rp.get(options))\n        return response\n    }\n}\n"]}